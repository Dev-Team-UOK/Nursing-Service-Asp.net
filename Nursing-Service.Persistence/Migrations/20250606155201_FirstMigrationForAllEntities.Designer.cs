// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nursing_Service.Persistence.Contexts;

#nullable disable

namespace Nursing_Service.Persistence.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20250606155201_FirstMigrationForAllEntities")]
    partial class FirstMigrationForAllEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Nursing_Service.Domain.Entities.Nurse.NurseCanDoService", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("NurseId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("ServiceId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NurseId");

                    b.HasIndex("ServiceId");

                    b.ToTable("NurseCanDoService");
                });

            modelBuilder.Entity("Nursing_Service.Domain.Entities.Patient.Patient", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Age")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<long?>("Height")
                        .HasColumnType("bigint");

                    b.Property<string>("IllnessHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("Weight")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Nursing_Service.Domain.Entities.Patient.PatientNeedService", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPast")
                        .HasColumnType("bit");

                    b.Property<decimal?>("NurseId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("PatientId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("ServiceDateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ServiceId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SuperVisorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NurseId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SuperVisorId");

                    b.ToTable("PatientNeedService");
                });

            modelBuilder.Entity("Nursing_Service.Domain.Entities.Service.Service", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<short?>("MinDuration")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Nursing_Service.Domain.Entities.User.User", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email", "DeletedDateTime")
                        .IsUnique()
                        .HasFilter("[DeletedDateTime] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Nursing_Service.Domain.Entities.Nurse.Nurse", b =>
                {
                    b.HasBaseType("Nursing_Service.Domain.Entities.User.User");

                    b.Property<string>("NurseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartWorkingInCompany")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("SuperVisorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<short?>("WorkHistoryInYear")
                        .HasColumnType("smallint");

                    b.HasIndex("SuperVisorId");

                    b.ToTable("Nurses", (string)null);
                });

            modelBuilder.Entity("Nursing_Service.Domain.Entities.SuperVisor.SuperVisor", b =>
                {
                    b.HasBaseType("Nursing_Service.Domain.Entities.User.User");

                    b.Property<int>("Shift")
                        .HasColumnType("int");

                    b.ToTable("Supervisors", (string)null);
                });

            modelBuilder.Entity("Nursing_Service.Domain.Entities.Nurse.NurseCanDoService", b =>
                {
                    b.HasOne("Nursing_Service.Domain.Entities.Nurse.Nurse", "Nurse")
                        .WithMany("DoService")
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nursing_Service.Domain.Entities.Service.Service", "Service")
                        .WithMany("NurseDoService")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nurse");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Nursing_Service.Domain.Entities.Patient.PatientNeedService", b =>
                {
                    b.HasOne("Nursing_Service.Domain.Entities.Nurse.Nurse", "AssignNurse")
                        .WithMany("ServicesForPatients")
                        .HasForeignKey("NurseId");

                    b.HasOne("Nursing_Service.Domain.Entities.Patient.Patient", "Patient")
                        .WithMany("NeedServices")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nursing_Service.Domain.Entities.Service.Service", "Service")
                        .WithMany("PatientNeedServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nursing_Service.Domain.Entities.SuperVisor.SuperVisor", "AssignSuperVisor")
                        .WithMany()
                        .HasForeignKey("SuperVisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignNurse");

                    b.Navigation("AssignSuperVisor");

                    b.Navigation("Patient");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Nursing_Service.Domain.Entities.Nurse.Nurse", b =>
                {
                    b.HasOne("Nursing_Service.Domain.Entities.User.User", null)
                        .WithOne()
                        .HasForeignKey("Nursing_Service.Domain.Entities.Nurse.Nurse", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nursing_Service.Domain.Entities.SuperVisor.SuperVisor", "SuperVisor")
                        .WithMany("SupervisorNurses")
                        .HasForeignKey("SuperVisorId");

                    b.Navigation("SuperVisor");
                });

            modelBuilder.Entity("Nursing_Service.Domain.Entities.SuperVisor.SuperVisor", b =>
                {
                    b.HasOne("Nursing_Service.Domain.Entities.User.User", null)
                        .WithOne()
                        .HasForeignKey("Nursing_Service.Domain.Entities.SuperVisor.SuperVisor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nursing_Service.Domain.Entities.Patient.Patient", b =>
                {
                    b.Navigation("NeedServices");
                });

            modelBuilder.Entity("Nursing_Service.Domain.Entities.Service.Service", b =>
                {
                    b.Navigation("NurseDoService");

                    b.Navigation("PatientNeedServices");
                });

            modelBuilder.Entity("Nursing_Service.Domain.Entities.Nurse.Nurse", b =>
                {
                    b.Navigation("DoService");

                    b.Navigation("ServicesForPatients");
                });

            modelBuilder.Entity("Nursing_Service.Domain.Entities.SuperVisor.SuperVisor", b =>
                {
                    b.Navigation("SupervisorNurses");
                });
#pragma warning restore 612, 618
        }
    }
}
